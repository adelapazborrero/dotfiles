
# ~/.zshrc file for zsh interactive shells.
# see /usr/share/doc/zsh/examples/zshrc for examples

setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# hide EOL sign ('%')
PROMPT_EOL_MARK=""

# configure key keybindings
bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^U' backward-kill-line                   # ctrl + U
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action

# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=2000
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
#setopt share_history         # share command history data

# force zsh to show the complete history
alias history="history 0"

# configure `time` format
TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

configure_prompt() {
    prompt_symbol=㉿
    # Skull emoji for root terminal
    #[ "$EUID" -eq 0 ] && prompt_symbol=💀
    case "$PROMPT_ALTERNATIVE" in
        twoline)
            PROMPT=$'%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
            # Right-side prompt with exit codes and background processes
            #RPROMPT=$'%(?.. %? %F{red}%B⨯%b%F{reset})%(1j. %j %F{yellow}%B⚙%b%F{reset}.)'
            ;;
        oneline)
            PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{%(#.red.blue)}%n@%m%b%F{reset}:%B%F{%(#.blue.green)}%~%b%F{reset}%(#.#.$) '
            RPROMPT=
            ;;
        backtrack)
            PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{red}%n@%m%b%F{reset}:%B%F{blue}%~%b%F{reset}%(#.#.$) '
            RPROMPT=
            ;;
    esac
    unset prompt_symbol
}

# The following block is surrounded by two delimiters.
# These delimiters must not be modified. Thanks.
# START KALI CONFIG VARIABLES
PROMPT_ALTERNATIVE=oneline
NEWLINE_BEFORE_PROMPT=yes
# STOP KALI CONFIG VARIABLES

if [ "$color_prompt" = yes ]; then
    # override default virtualenv indicator in prompt
    VIRTUAL_ENV_DISABLE_PROMPT=1

    configure_prompt

    # enable syntax-highlighting
    if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
        . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
        ZSH_HIGHLIGHT_STYLES[default]=none
        ZSH_HIGHLIGHT_STYLES[unknown-token]=underline
        ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[global-alias]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
        ZSH_HIGHLIGHT_STYLES[path]=bold
        ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
        ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[command-substitution]=none
        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[process-substitution]=none
        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
        ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[assign]=none
        ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
        ZSH_HIGHLIGHT_STYLES[named-fd]=none
        ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
        ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
        ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
        ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
        ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
    fi
else
    PROMPT='${debian_chroot:+($debian_chroot)}%n@%m:%~%(#.#.$) '
fi
unset color_prompt force_color_prompt

toggle_oneline_prompt(){
    if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
        PROMPT_ALTERNATIVE=twoline
    else
        PROMPT_ALTERNATIVE=oneline
    fi
    configure_prompt
    zle reset-prompt
}
zle -N toggle_oneline_prompt
bindkey ^P toggle_oneline_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
    TERM_TITLE=$'\e]0;${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%n@%m: %~\a'
    ;;
*)
    ;;
esac

precmd() {
    # Print the previously configured title
    print -Pnr -- "$TERM_TITLE"

    # Print a new line before the prompt, but only if it is not the first line
    if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
        if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
            _NEW_LINE_BEFORE_PROMPT=1
        else
            print ""
        fi
    fi
}

# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

    # Take advantage of $LS_COLORS for completion as well
    zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# enable auto-suggestions based on the history
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    # change suggestion color
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
fi

# enable command-not-found if installed
if [ -f /etc/zsh_command_not_found ]; then
    . /etc/zsh_command_not_found
fi

# GIT ALIASES
alias s="git status"
alias a="git add ."
alias c="git commit"
alias p="git push"
alias gl="git log"
alias gc="git checkout"
alias glo="git log --oneline"
alias gd="git diff ."
alias gds="git diff --staged ."

# SHORTCUT COMMANDS
alias ports="sudo lsof -i -P -n | grep LISTEN"
alias docker-down="sudo chmod 666 /var/run/docker.sock"
alias win="tmux rename-window"
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias :q="exit"
alias rdpass="python3 /home/typ0/Tools/RDPassSpray/RDPassSpray.py"
alias cme="crackmapexec"

# APPLICATIONS
alias v="nvim"
alias notes="nvim ~/Tools/pentest-notes"
alias gomapexec="/home/typ0/Tools/Go_Map_Exec/go_map_exec"
alias t="tmux"
alias store="/home/typ0/Tools/pling-store-5.0.2-1-x86_64.AppImage"
alias tree="lsd --tree"
alias dc="docker-compose"
alias dce="docker-compose exec"
alias code="code . && exit"
alias mk="microk8s kubectl"
alias monkey="toipe"
alias dclean="docker rmi $(docker images -a|grep "<none>"|awk '$1=="<none>" {print $3}')"
alias act="~/Tools/act/bin/act"
alias rustscan='docker run -it --rm --name rustscan rustscan/rustscan:2.1.1'
alias covenant-create='docker run -it -p 7443:7443 -p 80:80 -p 443:443 --name covenant -v /home/typ0/Tools/Covenant/Covenant/Data:/app/Data covenant'
alias covenant='docker start covenant -ai'

# OTHER
# If broken icons [curl https://raw.githubusercontent.com/UTFeight/logo-ls-modernized/master/INSTALL | bash]
# Go is needed before this installation
# alias l="ls -l"
# alias ll="ls -la"
# alias dir="ls -l"

alias l="logo-ls -l --disable-color"
alias ll="logo-ls -la --disable-color"
alias dir="logo-ls -l --disable-color"

alias config="v ~/.zshrc"
alias sconfig="source ~/.zshrc"
alias x="exit"
alias open="xdg-open"
alias restart-audio="systemctl restart --user pulseaudio"
alias clear-cache="paccache -rk2 && paccache -ruk1 && paccache -rk2 -c ~/.cache/yay/*/ && paccache -ruk0 ~/.cache/yay/*/"
alias anime="~/Tools/ani-cli/bin/ani-cli"
alias dirsearch="python3 /home/typ0/Tools/dirsearch/dirsearch.py"
alias gitleaks="/home/typ0/Tools/gitleaks/gitleaks"
alias sp="searchsploit"
alias autonmap="sudo /home/typ0/Tools/autonmap"
alias incursore="sudo /home/typ0/Tools/incursore"
alias ss="/home/typ0/Tools/Flameshot-12.1.0.x86_64.AppImage"
alias keepass-push="rclone sync /home/typ0/custom/keepass.kdbx driver:linux/"
alias keepass-pull="rclone sync driver:linux/keepass.kdbx /home/typ0/custom/keepass.kdbx"

function rice(){
    curl -L rum.sh/ricebowl

    GREEN='\033[0;32m'
    NC='\033[0m' # No Color

    echo "${GREEN} Break time ... ${NC}"

}

function serve() {
    # Black        0;30     Dark Gray     1;30
    # Red          0;31     Light Red     1;31
    # Green        0;32     Light Green   1;32
    # Brown/Orange 0;33     Yellow        1;33
    # Blue         0;34     Light Blue    1;34
    # Purple       0;35     Light Purple  1;35
    # Cyan         0;36     Light Cyan    1;36
    # Light Gray   0;37     White         1;37

    clear

    RED='\033[0;32m'
    NC='\033[0m' # No Color
    #show ips
    echo "${RED}[+] Current IP${NC}"
    ip r|grep " link "|cut -d " " -f 3,9

    echo "\n${RED}[+]Current files${NC}"
    ##list current folder
    lsd --tree . &&

    echo "\n${RED}[+] Starting server...${NC}"
    ##start server
    sudo python3 -m http.server 80
}

function serve-ftp() {
    RED='\033[0;32m'
    NC='\033[0m' # No Color
    #show ips
    echo "${RED}[+] Current IP${NC}"
    ip r|grep " link "|cut -d " " -f 3,9

    python3 -m pyftpdlib -p 21 --write
}

function setup() {
    if [ "$#" -eq 0 ]
    then
      echo "example: setup MachineName"
      return
    fi

    mkdir "$1"
    
    cd "$1"

    mkdir exploits files payloads requests scans

    mkdir exploits/foothold
    mkdir exploits/privesc

    mkdir payloads/foothold
    mkdir payloads/privesc


    RED='\033[0;32m'
    NC='\033[0m' # No Color

    echo "${RED}[+] Created space for $1${NC}"
    lsd --tree .
}

function scan() {
    GREEN='\033[0;32m'
    PURPLE='\033[0;35m'
    NC='\033[0m'
    ttl="$(ping -c 1 $1 | grep ttl | awk '{print $6}' |  sed s/ttl=//)"


    if [[ -z "$ttl" ]]; then
        echo -e "[?] Host is not responding, trying pinging"
        return
    fi

    if [ $ttl -le 64 ]; then
        echo -e "\n${GREEN}Target OS: ${PURPLE}LINUX${NC}"
    else
        echo -e "\n${GREEN}Target OS: ${PURPLE}WINDOWS${NC}"
    fi

    echo -e "\n${GREEN}[+] Starting scan on target\n${NC}"


    sudo nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn $1 -oG .tempPorts

    ports="$(cat .tempPorts | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
    echo -e "\n${GREEN}[+] Running scan for open ports: ${PURPLE}$ports${NC}\n" >> .extractPorts.tmp

    cat .extractPorts.tmp

    sudo nmap -sCV -p$ports $1 -oN target-scan
    rm -f .tempPorts
    rm -f .extractPorts.tmp
}

function scan-udp() {
    GREEN='\033[0;32m'
    PURPLE='\033[0;35m'
    NC='\033[0m'
    ttl="$(ping -c 1 $1 | grep ttl | awk '{print $6}' |  sed s/ttl=//)"


    if [[ -z "$ttl" ]]; then
        echo -e "[?] Host is not responding, trying pinging"
        return
    fi

    if [ $ttl -le 64 ]; then
        echo -e "\n${GREEN}Target OS: ${PURPLE}LINUX${NC}"
    else
        echo -e "\n${GREEN}Target OS: ${PURPLE}WINDOWS${NC}"
    fi

    echo -e "\n${GREEN}[+] Starting scan on target\n${NC}"


    sudo nmap -p- -sU --min-rate 5000 -vvv -n $1 -oG .tempPortsUDP

    ports="$(cat .tempPortsUDP | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
    echo -e "\n${GREEN}[+] Running scan for open ports: ${PURPLE}$ports${NC}\n" >> .extractPortsUDP.tmp

    cat .extractPortsUDP.tmp

    sudo nmap -sCV -p$ports $1 -oN target-scan
    rm -f .tempPortsUDP
    rm -f .extractPortsUDP.tmp
}

function share() {
  RED='\033[0;32m'
  NC='\033[0m' # No Color

  # Initialize an array to store the interface information
  interfaces=()
  # Show IPs and populate the array
  echo "${RED}[+] Select interface${NC}"
  while IFS= read -r line; do
    interfaces+=("$line")
  done < <(ip r | grep " link " | cut -d " " -f 3,9)

  PS3="(1-${#interfaces[@]})  "
  select selected_interface in "${interfaces[@]}"; do
    if [[ -n $selected_interface ]]; then
      selected_ip=$(echo "$selected_interface" | awk '{print $NF}')
      break
    else
      echo "Invalid choice. Please choose a number between 1 and ${#interfaces[@]}."
    fi
  done


  echo "\n${RED}[+] Select target OS${NC}"
  PS3="(1-2)  "
  select target_os in "Windows" "Linux"; do
    case $target_os in
      "Windows")
        echo "\n${RED}[+] Current files${NC}"
        echo
        find . -type f | awk -F/ '{print "certutil -urlcache -f http://'$selected_ip'/" $NF}'
        echo "\n${RED}[+] Starting server...${NC}"
        sudo python3 -m http.server 80
        break
        ;;
      "Linux")
        echo "\n${RED}[+] Current files${NC}"
        echo
        find . -type f | awk -F/ '{print "wget http://'$selected_ip'/" $NF}'
        echo "\n${RED}[+] Starting server...${NC}"
        sudo python3 -m http.server 80
        break
        ;;
      *)
        echo "Invalid choice for target OS. Please 1 or 2 in the selection"
        ;;
    esac
  done
}

function forward-http() {
    local subdomain=""
    local parser_flag="parser"

    while getopts ":s:" opt; do
        case $opt in
            s)
                subdomain="$OPTARG"
                ;;
            \?)
                echo "Invalid option: -$OPTARG"
                echo "Usage: forward-http [-s <subdomain>] <port>"
                return 1
                ;;
        esac
    done

    shift $((OPTIND-1))

    if [ "$#" -ne 1 ]; then
        echo "Usage: forward-http [-s <subdomain>] <port>"
        return 1
    fi

    if [ -n "$subdomain" ]; then
        parser_flag="$subdomain"
    fi

    ssh -R "${parser_flag}.serveo.net:80:localhost:$1" serveo.net
}

function rev-pw() {
    python3 ~/Tools/encoder.py $1 $2
}

function forward-tcp(){
     if [ "$#" -ne 1 ]; then
        echo "Usage: forward-tcp <port>"
        return 1
     fi
     ngrok tcp $1 
}

function help(){
    curl cheat.sh/$1
}


function encode() {
    local prepend_c="powershell -w hidden -enc"
    local prepend_l="C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    local str=""
    local flag=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c)
                flag="prepend_c"
                shift # Move to the next argument
                ;;
            -l)
                flag="prepend_l"
                shift # Move to the next argument
                ;;
            *)
                str="$1"
                shift
                ;;
        esac
    done

    # Perform encoding
    local base64_str
    base64_str=$(echo -n "$str" | iconv -t UTF-16LE | base64 -w 0)

    # Output result based on flag
    if [[ "$flag" == "prepend_c" ]]; then
        printf "%s %s\n" "$prepend_c" "$base64_str"
    elif [[ "$flag" == "prepend_l" ]]; then
        printf "%s -EncodedCommand %s\n" "$prepend_l" "$base64_str"
    else
        printf "%s\n" "$base64_str"
    fi
}

# enable auto-suggestions based on the history
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    # change suggestion color
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#545454'
fi

# enable command-not-found if installed
if [ -f /etc/zsh_command_not_found ]; then
    . /etc/zsh_command_not_found
fi

export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:/home/typ0/go/bin
export PATH="/home/typ0/.local/bin:$PATH"

export LD_LIBRARY_PATH=/usr/lib/oracle/19.6/client64/lib/:$LD_LIBRARY_PATH

source ~/Tools/z.sh
